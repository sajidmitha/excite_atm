<project name="excite" default='all' basedir="." >
  
   <description>
     Demo ATM application
   </description>

   <!-- 
    First define properties, datatypes, and default tasks; then define targets.
    Any Ant tasks placed outside of any target are always executed first.
   -->  
  
  <!-- Override default property values with an external properties file, if present. -->
  <property file='env.properties'/>
  <property environment="env"/>
  <!-- Default property values, if not overridden elsewhere: -->
  <property name='build' location='build' />
  <property name='app.version' value='1.0'/>
  <property name='app.name' value='Example App'/>
  <property name='distro-name' value='excite-atmapp-${app.version}'/>
  <tstamp><format property='build.time' pattern='yyyy-MM-dd HH:mm:ss'/></tstamp>

  <path id='compile.classpath'>
    <fileset dir='${excite.lib}'>
       <include name='*.jar'/>
    </fileset>
  </path>

  <!-- Simply extends the compile.classpath with your own compiled classes. -->
  <path id='run.classpath'>
    <path refid='compile.classpath'/>
    <path location='${excite.src}'/>
  </path>
  
  <fileset id='class.files' dir='${excite.src}'>
     <include name='**/*.class'/>
  </fileset>

  <fileset id='files.for.jar' dir='${excite.src}'>
    <exclude name='**/*.java'/>
    <exclude name='**/doc-files/'/>
  </fileset>
  
  <fileset id='test.classes' dir='${excite.src}'>
    <include name='**/*Tests*.java'/>
  </fileset>

  <echo>
    Application: ${app.name} ${app.version}
    Build File : ${ant.file}
  	Excite File : ${excite.src}
    Run Date   : ${build.time}
    Run by     : ${user.name}
    Build Dir  : ${build}
    Base Dir   : ${basedir}
    Java Home  : ${java.home}
    Deployment host running: ${deployment.server.running}
    Connected to the web   : ${jdk.javadoc.visible}
  </echo>
    
  <echo message='Create build directory, and its subdirectories.'/>
  <mkdir dir="${build}/javadoc"/>
  <mkdir dir="${build}/dist"/>
  <mkdir dir="${build}/templates"/>

  <!-- Now define the targets, which use the properties and datatypes defined above. -->

   <target name='clean' description="Delete all build artifacts." >
     <delete dir='${build}'/>
     <delete>
      	<fileset refid='class.files'/>
     </delete>
   	<mkdir dir="${build}"/>
   	<mkdir dir="${build}/javadoc"/>
     <mkdir dir="${build}/dist"/>
   	 <mkdir dir="${build}/classes"/>
     <mkdir dir="${build}/templates"/>
   </target>
  
   <target name='compile' description='Compile source files and place beside source.'>
     <javac destdir='${excite.classes}' srcdir='${excite.src}'>   
       <classpath refid='compile.classpath'/>
     </javac>
     <!-- Here's a simple way of debugging a path, fileset, or patternset, using its refid: -->
     <echo>Classpath: ${toString:compile.classpath}</echo>
   </target> 
  
   <target name='test' description='Run all JUnit tests.' depends='compile'>
     <junit haltonfailure='false'> 
     	<classpath>
     	    <pathelement location='${excite.src}'/>
     		<path refid='compile.classpath'/>
     	</classpath>
       <batchtest>
         <fileset refid='test.classes'/>
       </batchtest>
       <formatter type='brief' usefile='no'/>
     </junit>
   </target>

  
   <target name='jar' description='Create a jar file for distribution.' depends='compile'>
    <jar destfile='${build}/dist/${distro-name}.jar' manifest='MANIFEST.MF' duplicate='preserve'>
      <fileset refid='files.for.jar'/>
      <!-- The static manifest.mf file is merged with additional dynamic items, specified here : -->
      <manifest>
        <attribute name='Specification-Version' value='${app.version}'/> 
        <attribute name='Specification-Title' value='${app.name}' />
        <attribute name='Implementation-Version' value='${app.version}'/> 
        <attribute name='Implementation-Title' value='${app.name}' />
      </manifest>
    </jar>
   </target>
  
<target name='all' description='Create all build artifacts.' 
             depends='clean,compile, test, jar'>
    <echo>Finished creating all build artifacts.</echo>
  </target>
  
</project>
